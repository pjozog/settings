#!/bin/bash

#USE SSH TO ENCRYPT VNC TRAFFIC:
# let's say the remote router has port 33 forwarded to port 22 on one of its clients
# Further, let's say that client has apache running on port 80, but the router blocks port 80 for all outside connections
# What we'd like is to access the firewalled client's webpage.
# To conceptually complicate things, the router has a web server running on port 80, accessible only from the LAN
# Just do:
 ssh -p 33 username@ip.of.router.org -L 12345:localhost:80
 #wait to login...leave session running
# now we can securely login from the current computer using the address
 http://localhost:12345

#PASSWORD-ENCRYPT A FILE USING GPG:
 gpg -c plaintext
#PASSWORD-DECRYPT A FILE USING GPG:
 gpg plaintext.gpg # this will create 'plaintext' in the cwd

#BUILD UBUNTU PACKAGES USING THE OFFICIAL COPY OF THE SOURCE 
#make the build directory
mkdir ffmpeg
cd ffmpeg
apt-get source ffmpeg
#enter the build directory
cd ffmpeg-0.cvs20050918
#options and stuff...
DEB_BUILD_OPTIONS=risky dpkg-buildpackage -uc -us -rfakeroot
#install the built packages
cd ..
dpkg -i *.deb

#Compile linux 
make menuconfig; #use ".config" from ubuntu
make && make modules && make modules_install && make install
mkinitramfs -o /boot/initrd.img-2.6.37-rc2-MIRACLE_PATCH 2.6.37-rc2-MIRACLE_PATCH

#Modules
# they are stored in /lib/modules.  They are NOT removed automatically

#Module dependencies
depmod -a

#To install some python packages (OpenCV) to /usr/local/, I had to make a 
# symbolic link
ln -sf /usr/local/lib/python2.6/dist-packages /usr/local/lib/python2.6/site-packages

#Make /usr/local a valid 'make install' location
#In /etc/ld.so.conf:
#include /etc/ld.so.conf.d/*.conf
#/usr/local/lib

#Only get certain files using rsync:
sudo rsync --stats --progress -avz --include '*/' --include '*.tif' --include '*.JPG' --include '*.png' --include '*.jpg' --include '*.PNG' --exclude '*' paulozog@robots:/var/data/DSL/ .

#Emacs margin and "strip" color: search for "fringe"
# rsync -avz -e "ssh -p $portNumber" user@remoteip:/path/to/files/ /local/path/

#zsh:
# To expand wild cards via rsync/scp, put argument in double quotes:
rsync -avk "paul@someHost:/var/data/*" .

#remove white background from image and replace with transparency
convert +antialias -transparent '#ffffff' -density 600x -trim -geometry 50% infile outfile
# viewer color is '#f2f2ff'

#patch entire source tree source
diff -Naur olddir newdir > new-patch
#from olddir:
patch -p1 < new-patch

# use a different default application (ie - web browser)
sudo update-alternatives --config x-www-browser

# decrease the size of .pdf with images
\gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile=output.pdf input.pdf

# wget a directory on some server
wget -H -r --level=1 -k -p http://www.ctan.org/tex-archive/fonts/cm/ps-type1/bakoma/otf/

# MATLAB sometimes displays latex labels in figures with weird spacing.  Solution: Make
# sure DPI is 100x100.  Can be set in xorg.cfg in display

# scan for open ports
sudo nmap -sS -O -PN pjozog.dyndns.org

# authenticated samba share:
# 0. Make sure 'security = user' is uncommented in /etc/samba/smb.conf
# 1. Add samba password for user
sudo smbpasswd -a username
# 2. Enable share (in nautilus (by right-click), or smb.conf)
#    Share config will be in /var/lib/samba/usershares

# changing password, as non-root (must be 5 or more characters)
smbpasswd

# disabling samba for a user
sudo smbpasswd -d username

# awesome window manager and terminator resizing when in float mode:
# turn off "Window Geometry Hints" in terminator's preferences

# git: clone only certain directories
# $ git init <repo>
# $ cd <repo>
# $ git remote add -f origin <url>

# This creates an empty repository with your remote. Then do:

# $ git config core.sparsecheckout true

# Now you need to define which files/folders you want to actually check out. This is done
# by listing them in .git/info/sparse-checkout, eg:

# $ echo "some/dir/" >> .git/info/sparse-checkout
# $ echo "another/sub/tree" >> .git/info/sparse-checkout

# Last but not least, update your empty repo with the state from the remote:

# $ git pull origin master

# rsync a directory with a ton of files in it:
tar c /dir/you/want/to/send | gzip - | ssh host.you.want.to.send.to 'cd /direcotry/on/host/to/extract/to; tar xz'

# list a directory a ton of files in it:
\ls -f
\ls -f | wc -l                  # count number of files

# apply a command to files that are too big for wildcard ('*')
find /some/dir/with/lots/of/tiff/files -path "*.tif" | xargs -I {} ln -sf {} .
